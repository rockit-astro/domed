#!/usr/bin/env python3
#
# This file is part of domed.
#
# domed is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# domed is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with domed.  If not, see <http://www.gnu.org/licenses/>.

"""Dome daemon for the Warwick one-metre telescope"""

# pylint: disable=too-few-public-methods
# pylint: disable=too-many-instance-attributes

import datetime
import threading
import time

import Pyro4
import serial

PYRO_HOST = 'localhost'
PYRO_PORT = 9004

# Maximum time it should take for the shutters to fully open or close
SHUTTER_TIMEOUT = datetime.timedelta(seconds=60)

# Delay between sending command bytes
COMMAND_DELAY = 0.5

# This should be kept in sync with the dictionary in dome
class CommandStatus:
    """Numeric return codes"""
    # General error codes
    Succeeded = 0
    Failed = 1
    Blocked = 2

class DomeShutterStatus:
    """Status of the dome shutters"""
    Closed, Open, PartiallyOpen, Opening, Closing = range(5)

class TryLock(object):
    """Helper object for use with `with` statements"""
    def __init__(self, lock):
        self._lock = lock
        self._locked = False

    def __enter__(self):
        self._locked = self._lock.acquire(False)
        return self._locked

    def __exit__(self, *args):
        if self._locked:
            self._lock.release()
            self._locked = False

class DomeDaemon:
    """Daemon class that wraps the RS232 interface"""
    SERIAL_PORT = '/dev/ttyACM0'
    SERIAL_BAUD = 9600
    SERIAL_TIMEOUT = 3

    def __init__(self):
        self._last_error_lock = threading.Lock()
        self._last_error_time = None
        self._last_error_message = None
        self._port = None

        self._status_lock = threading.Lock()
        self._status_time = None
        self._east_shutter = DomeShutterStatus.Closed
        self._west_shutter = DomeShutterStatus.Closed

        self._command_lock = threading.Lock()
        self._force_stopped = False

        runloop = threading.Thread(target=self.__monitor_dome_status)
        runloop.daemon = True
        runloop.start()

    # pylint: disable=broad-except
    def __monitor_dome_status(self):
        """Monitors the status of the dome by reading serial port"""
        while True:
            # Initial setup
            try:
                self._port = serial.Serial(DomeDaemon.SERIAL_PORT,
                                           DomeDaemon.SERIAL_BAUD,
                                           timeout=DomeDaemon.SERIAL_TIMEOUT)
            except Exception as exception:
                print(exception)
                print('Will retry in 5 seconds...')
                with self._last_error_lock:
                    self._last_error_message = str(exception)
                    self._last_error_time = datetime.datetime.utcnow()
                time.sleep(5.)
                continue

            try:
                print('Connected to', DomeDaemon.SERIAL_PORT)

                # Flush any stale state
                self._port.flushInput()
                self._port.flushOutput()

                # Main run loop
                while True:
                    data = self._port.read(1)

                    if len(data) == 0:
                        raise serial.SerialTimeoutException('Read timeout')

                    with self._status_lock:
                        self.__parse_status(data[0])
                        self._status_time = datetime.datetime.utcnow()

            except Exception as exception:
                self._port.close()
                with self._last_error_lock:
                    self._last_error_message = str(exception)
                    self._last_error_time = datetime.datetime.utcnow()

                print(exception)
                print('Will retry in 5 seconds...')
                time.sleep(5.)
    # pylint: enable=broad-except

    def __parse_status(self, status):
    # pylint: disable=too-many-branches
        if status == ord('0'):
            self._east_shutter = DomeShutterStatus.Closed
            self._west_shutter = DomeShutterStatus.Closed
        elif status == ord('1'):
            if self._east_shutter != DomeShutterStatus.Open:
                self._east_shutter = DomeShutterStatus.PartiallyOpen
            self._west_shutter = DomeShutterStatus.Closed
        elif status == ord('2'):
            self._east_shutter = DomeShutterStatus.Closed
            if self._west_shutter != DomeShutterStatus.Open:
                self._west_shutter = DomeShutterStatus.PartiallyOpen
        elif status == ord('3'):
            if self._east_shutter != DomeShutterStatus.Open:
                self._east_shutter = DomeShutterStatus.PartiallyOpen
            if self._west_shutter != DomeShutterStatus.Open:
                self._west_shutter = DomeShutterStatus.PartiallyOpen
        elif status == ord('A'):
            self._east_shutter = DomeShutterStatus.Closing
        elif status == ord('a'):
            self._east_shutter = DomeShutterStatus.Opening
        elif status == ord('X'):
            self._east_shutter = DomeShutterStatus.Closed
        elif status == ord('x'):
            self._east_shutter = DomeShutterStatus.Open
        elif status == ord('B'):
            self._west_shutter = DomeShutterStatus.Closing
        elif status == ord('b'):
            self._west_shutter = DomeShutterStatus.Opening
        elif status == ord('Y'):
            self._west_shutter = DomeShutterStatus.Closed
        elif status == ord('y'):
            self._west_shutter = DomeShutterStatus.Open
        else:
            with self._last_error_lock:
                self._last_error_message = 'Unknown status code: {0}'.format(status)
                self._last_error_time = datetime.datetime.utcnow()
    # pylint: enable=too-many-branches

    def __move_shutter(self, command, at_requested_limit):
        """Issues a dome command and blocks until the final state is reached (or timeout)"""

        starttime = datetime.datetime.utcnow()
        while True:
            # pylint: disable=broad-except
            try:
                length = self._port.write(command.encode('ascii'))
                if length != 1:
                    raise serial.SerialException('Failed to send command ' + command)
            except Exception as exception:
                with self._last_error_lock:
                    self._last_error_message = str(exception)
                    self._last_error_time = datetime.datetime.utcnow()
            # pylint: enable=broad-except
            time.sleep(COMMAND_DELAY)
            timedout = datetime.datetime.utcnow() - starttime > SHUTTER_TIMEOUT
            if at_requested_limit() or self._force_stopped or timedout:
                break
        return not self._force_stopped and at_requested_limit()

    @Pyro4.expose
    def open_east_shutter(self):
        """Opens the east shutter.
           Returns when the shutter reaches the open limit or command times out."""
        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            at_requested_limit = lambda: self._east_shutter == DomeShutterStatus.Open
            if not self.__move_shutter('a', at_requested_limit):
                return CommandStatus.Failed
            return CommandStatus.Succeeded

    @Pyro4.expose
    def close_east_shutter(self):
        """Closes the east shutter.
           Returns when the shutter reaches the open limit or command times out."""
        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            at_requested_limit = lambda: self._east_shutter == DomeShutterStatus.Closed
            if not self.__move_shutter('A', at_requested_limit):
                return CommandStatus.Failed
            return CommandStatus.Succeeded

    @Pyro4.expose
    def open_west_shutter(self):
        """Opens the west shutter.
           Returns when the shutter reaches the open limit or command times out."""
        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            at_requested_limit = lambda: self._west_shutter == DomeShutterStatus.Open
            if not self.__move_shutter('b', at_requested_limit):
                return CommandStatus.Failed
            return CommandStatus.Succeeded

    @Pyro4.expose
    def close_west_shutter(self):
        """Closes the west shutter.
           Returns when the shutter reaches the open limit or command times out."""
        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            at_requested_limit = lambda: self._west_shutter == DomeShutterStatus.Closed
            if not self.__move_shutter('B', at_requested_limit):
                return CommandStatus.Failed
            return CommandStatus.Succeeded

    @Pyro4.expose
    def stop(self):
        """Stops any active shutter movement"""

        # The stop command overrides all other commands
        self._force_stopped = True
        with self._command_lock:
            self._force_stopped = False

        return CommandStatus.Succeeded

    @Pyro4.expose
    def status(self):
        """Query the latest status."""
        with self._status_lock:
            date = self._status_time.strftime('%Y-%m-%dT%H:%M:%SZ')
            return (date, self._east_shutter, self._west_shutter)

    @Pyro4.expose
    def last_error(self):
        """Query the latest error time and message"""
        with self._last_error_lock:
            return (self._last_error_time, self._last_error_message)

def spawn_daemon():
    """Spawns the daemon and registers it with Pyro"""
    Pyro4.config.COMMTIMEOUT = 5
    Pyro4.config.REQUIRE_EXPOSE = True

    pyro = Pyro4.Daemon(host=PYRO_HOST, port=PYRO_PORT)
    dome = DomeDaemon()
    uri = pyro.register(dome, objectId='dome_daemon')

    print('Starting dome daemon with Pyro ID:', uri)
    pyro.requestLoop()
    print('Stopping dome daemon with Pyro ID:', uri)

if __name__ == '__main__':
    spawn_daemon()
