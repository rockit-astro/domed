#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Astrohaven dome daemon"""

import argparse
import datetime
import threading
import time
import Pyro4
import serial
from rockit.common import log, TryLock
from rockit.common.helpers import pyro_client_matches
from rockit.dome import (
    Config,
    CommandStatus,
    DomeShutterStatus,
    DomeHeartbeatStatus)


class DomeDaemon:
    """Daemon class that wraps the RS232 interface"""
    def __init__(self, config):
        self._config = config
        self._port = None
        self._port_error = False

        self._status_lock = threading.Lock()
        self._status_time = None
        self._shutter_a = DomeShutterStatus.Closed
        self._shutter_b = DomeShutterStatus.Closed

        self._command_lock = threading.Lock()
        self._force_stopped = False
        self._engineering_mode = False

        runloop = threading.Thread(target=self.__monitor_dome_status)
        runloop.daemon = True
        runloop.start()

        self._heartbeat_port = None
        self._heartbeat_status = DomeHeartbeatStatus.Unavailable
        self._heartbeat_time_remaining = 0
        self._heartbeat_date = datetime.datetime.now(datetime.timezone.utc)
        self._heartbeat_siren_enabled = True

        if self._config.heartbeat_port:
            heartbeat = threading.Thread(target=self.__monitor_heartbeat)
            heartbeat.daemon = True
            heartbeat.start()

    def __monitor_dome_status(self):
        """Monitors the status of the dome by reading serial port"""
        while True:
            # Initial setup
            try:
                self._port = serial.Serial(self._config.serial_port,
                                           self._config.serial_baud,
                                           timeout=self._config.serial_timeout_seconds)
                prefix = 'Restored' if self._port_error else 'Established'
                log.info(self._config.log_name, prefix + ' serial connection to dome')
                self._port_error = False

            except Exception as exception:
                print(exception)
                print('Will retry in 5 seconds...')

                if not self._port_error:
                    log.error(self._config.log_name, 'Lost serial connection to dome')

                print('Failed to connect to serial port (' + str(exception) + ')')
                self._port_error = True
                time.sleep(5.)
                continue

            try:
                # Flush any stale state
                self._port.flushInput()
                self._port.flushOutput()

                if self._config.legacy_controller:
                    # The older non-PLC controllers will only return A/B/X/Y status bytes in
                    # response to an issued move command. We therefore need to try closing a
                    # step to find out where the shutters are now
                    def step_once(_):
                        return True

                    self.__move_shutter('A', step_once, self._config.command_delay_seconds, 0)
                    self.__move_shutter('B', step_once, self._config.command_delay_seconds, 0)

                # Main run loop
                while True:
                    data = self._port.read(1)

                    if not data:
                        if self._config.legacy_controller:
                            # Legacy controllers only send data in response to a move command
                            continue
                        raise serial.SerialTimeoutException('Dome serial read timeout')

                    with self._status_lock:
                        self.__parse_status(data[0])
                        self._status_time = datetime.datetime.now(datetime.timezone.utc)

            except Exception as exception:
                self._port.close()

                print('Failed to read to serial port (' + str(exception) + ')')
                print('Will retry in 5 seconds...')
                if not self._port_error:
                    log.error(self._config.log_name, 'Lost serial connection to dome')

                self._port_error = True
                time.sleep(5.)

    def __parse_status(self, status):
        if status == ord('0'):
            self._shutter_a = DomeShutterStatus.Closed
            self._shutter_b = DomeShutterStatus.Closed
        elif status == ord('1'):
            self._shutter_a = DomeShutterStatus.Closed
            if self._shutter_b != DomeShutterStatus.Open:
                self._shutter_b = DomeShutterStatus.PartiallyOpen
        elif status == ord('2'):
            if self._shutter_a != DomeShutterStatus.Open:
                self._shutter_a = DomeShutterStatus.PartiallyOpen
            self._shutter_b = DomeShutterStatus.Closed
        elif status == ord('3'):
            if self._shutter_a != DomeShutterStatus.Open:
                self._shutter_a = DomeShutterStatus.PartiallyOpen
            if self._shutter_b != DomeShutterStatus.Open:
                self._shutter_b = DomeShutterStatus.PartiallyOpen
        elif status == ord('A'):
            if self._config.legacy_controller:
                self._shutter_a = DomeShutterStatus.PartiallyOpen
            else:
                self._shutter_a = DomeShutterStatus.Closing
        elif status == ord('a'):
            if self._config.legacy_controller:
                self._shutter_a = DomeShutterStatus.PartiallyOpen
            else:
                self._shutter_a = DomeShutterStatus.Opening
        elif status == ord('X'):
            self._shutter_a = DomeShutterStatus.Closed
        elif status == ord('x'):
            self._shutter_a = DomeShutterStatus.Open
        elif status == ord('B'):
            if self._config.legacy_controller:
                self._shutter_b = DomeShutterStatus.PartiallyOpen
            else:
                self._shutter_b = DomeShutterStatus.Closing
        elif status == ord('b'):
            if self._config.legacy_controller:
                self._shutter_b = DomeShutterStatus.PartiallyOpen
            else:
                self._shutter_b = DomeShutterStatus.Opening
        elif status == ord('Y'):
            self._shutter_b = DomeShutterStatus.Closed
        elif status == ord('y'):
            self._shutter_b = DomeShutterStatus.Open
        elif status == ord('R'):
            print('Bumper guard relay reset')
            log.error(self._config.log_name, 'Bumper guard relay reset')
        else:
            print(f'Unknown status code: {status}')
            log.error(self._config.log_name, 'Unknown dome status code ' + str(status))

    def __monitor_heartbeat(self):
        """Monitors the heartbeat timer and close the dome if it expires"""
        first_connection = True
        while True:
            # Initial setup
            try:
                self._heartbeat_port = serial.Serial(self._config.heartbeat_port,
                                                     self._config.heartbeat_baud,
                                                     timeout=self._config.heartbeat_timeout_seconds)

                print('Connected to heartbeat monitor on', self._config.heartbeat_port)
                prefix = 'Established' if first_connection else 'Restored'
                log.info(self._config.log_name, prefix + ' USB connection to heartbeat monitor')
                first_connection = False
            except Exception as exception:
                print('Failed to open heartbeat monitor connection with error:')
                print(exception)
                print('Will retry in 5 seconds...')
                if self._heartbeat_status != DomeHeartbeatStatus.Unavailable:
                    log.error(self._config.log_name, 'Failed to connect to heartbeat monitor')
                time.sleep(5.)

                self._heartbeat_status = DomeHeartbeatStatus.Unavailable
                continue

            try:
                # Flush any stale state
                self._heartbeat_port.flushInput()
                self._heartbeat_port.flushOutput()
                self._heartbeat_status = DomeHeartbeatStatus.Disabled

                # Main run loop
                while True:
                    data = self._heartbeat_port.read(1)
                    if not data:
                        raise serial.SerialTimeoutException('Heartbeat serial read timeout')

                    status = data[-1]
                    with self._status_lock:
                        self._heartbeat_time_remaining = 0
                        if status == 254:
                            if self._heartbeat_status != DomeHeartbeatStatus.TrippedClosing:
                                log.error(self._config.log_name,
                                          'Heartbeat monitor is closing dome')
                            self._heartbeat_status = DomeHeartbeatStatus.TrippedClosing
                            self._shutter_a = DomeShutterStatus.HeartbeatMonitorForceClosing
                            self._shutter_b = DomeShutterStatus.HeartbeatMonitorForceClosing
                            self._status_time = datetime.datetime.now(datetime.timezone.utc)
                        elif status == 255:
                            if self._heartbeat_status != DomeHeartbeatStatus.TrippedIdle:
                                log.info(self._config.log_name,
                                         'Heartbeat monitor has finished closing dome')
                            if self._heartbeat_status != DomeHeartbeatStatus.TrippedIdle \
                                    and self._config.legacy_controller:
                                # The heartbeat monitor disconnects the dome serial connection when
                                # it is closing the dome, so we don't know for sure what the current
                                # status of the dome is now. Issue another close step so that we can
                                # receive a new status update
                                def step_once(_):
                                    return True

                                self.__move_shutter('A', step_once,
                                                    self._config.command_delay_seconds, 0)
                                self.__move_shutter('B', step_once,
                                                    self._config.command_delay_seconds, 0)
                            self._heartbeat_status = DomeHeartbeatStatus.TrippedIdle
                        elif status == 0:
                            if self._heartbeat_status != DomeHeartbeatStatus.Disabled:
                                log.info(self._config.log_name, 'Heartbeat disabled')
                            self._heartbeat_status = DomeHeartbeatStatus.Disabled
                        else:
                            if self._heartbeat_status != DomeHeartbeatStatus.Active:
                                log.info(self._config.log_name, 'Heartbeat enabled')
                            self._heartbeat_status = DomeHeartbeatStatus.Active

                            # Heartbeat monitor represents time using half-second ticks
                            self._heartbeat_time_remaining = status / 2.

                        self._heartbeat_date = datetime.datetime.now(datetime.timezone.utc)

            except Exception as exception:
                self._heartbeat_port.close()
                self._heartbeat_status = DomeHeartbeatStatus.Unavailable
                print(exception)
                print('Will retry in 5 seconds...')
                log.error(self._config.log_name, 'Failed to read heartbeat monitor')
                time.sleep(5.)

    def __move_shutter(self, command, at_requested_limit, step_delay, timeout, siren=True):
        """Issues a dome command and blocks until the final state is reached (or timeout)"""
        if self._config.has_bumper_guard:
            try:
                length = self._port.write('R'.encode('ascii'))
                if length != 1:
                    raise serial.SerialException('Failed to send command R')
                time.sleep(step_delay)
            except Exception as exception:
                log.error(self._config.log_name, 'Failed to send serial command (' + str(exception) + ')')

        # Sound the siren for 5 seconds before any movement
        if siren and self._heartbeat_siren_enabled:
            try:
                length = self._heartbeat_port.write(bytes([0xFF]))
                if length != 1:
                    raise serial.SerialException('Failed to send heartbeat siren command')

                time.sleep(5.)
            except Exception as exception:
                log.error(self._config.log_name, 'Failed to send heartbeat serial command (' + str(exception) + ')')

        step_count = 0
        start_time = datetime.datetime.now(datetime.timezone.utc)

        while True:
            try:
                length = self._port.write(command.encode('ascii'))
                if length != 1:
                    raise serial.SerialException('Failed to send command ' + command)
                step_count += 1
            except Exception as exception:
                log.error(self._config.log_name, 'Failed to send serial command (' + str(exception) + ')')
            time.sleep(step_delay)
            runtime = (datetime.datetime.now(datetime.timezone.utc) - start_time).total_seconds()
            heartbeat_tripped = self._heartbeat_status in [DomeHeartbeatStatus.TrippedClosing,
                                                           DomeHeartbeatStatus.TrippedIdle]
            at_limit = at_requested_limit(step_count)
            if self._force_stopped or heartbeat_tripped or at_limit or 0 < timeout < runtime:
                break

        return not self._force_stopped and not heartbeat_tripped and at_limit

    @Pyro4.expose
    def open_shutters(self, sides, steps=0):
        """
        Open one or both dome shutters, optionally by a limited number of steps
        :param sides: string containing 'a' and/or 'b' defining the sides and order
        :param steps: Number of steps to move, or full open if 0
        :return: CommandStatus indicating success or error code
        """
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if self._engineering_mode:
            return CommandStatus.EngineeringModeActive

        if self._heartbeat_status == DomeHeartbeatStatus.TrippedClosing:
            return CommandStatus.HeartbeatCloseInProgress

        if self._heartbeat_status == DomeHeartbeatStatus.TrippedIdle:
            return CommandStatus.HeartbeatTimedOut

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            sides = sides.lower()
            if 'a' in sides and 'b' in sides:
                log.info(self._config.log_name, 'Opening both shutters')
            else:
                log.info(self._config.log_name, f'Opening {self._config.side_labels[sides]} shutter')

            success = True

            # If moving a fixed number of steps then we must wait for the shutters
            # to stop moving between each step command to ensure the step size is constant
            step_delay = self._config.step_command_delay_seconds if steps > 0 \
                else self._config.command_delay_seconds

            # If moving a fixed number of steps then the timeout is implicit
            # (step_command_delay_seconds * steps)
            timeout = 0 if steps > 0 else self._config.shutter_timeout_seconds

            # pylint: disable=cell-var-from-loop
            for side in sides:
                # Already open?
                status = self._shutter_a if side == 'a' else self._shutter_b
                if status == DomeShutterStatus.Open:
                    continue

                # Open part way using steps
                slow_open = steps == 0 and self._config.slow_open_steps > 0
                if slow_open:
                    slow_delay = self._config.step_command_delay_seconds

                    if self._config.domealert_belt_sensors[side]:
                        with self._config.domealert_daemon.connect() as domealert:
                            def at_step_limit(s):
                                status = self._shutter_a if side == 'a' else self._shutter_b
                                belt_tensioned = domealert.last_measurement()[self._config.domealert_belt_sensors[side]]
                                return status == DomeShutterStatus.Open or not belt_tensioned \
                                    or s >= self._config.slow_open_steps

                            success = success and self.__move_shutter(side, at_step_limit, slow_delay, 0)
                            belt_tensioned = domealert.last_measurement()[self._config.domealert_belt_sensors[side]]
                            if not belt_tensioned:
                                log.error(self._config.log_name, f'{self._config.side_labels[side]} belt is slack!')
                                success = False
                    else:
                        def at_step_limit(s):
                            status = self._shutter_a if side == 'a' else self._shutter_b
                            return status == DomeShutterStatus.Open or s >= self._config.slow_open_steps

                        success = success and self.__move_shutter(side, at_step_limit, slow_delay, 0)

                if self._config.domealert_belt_sensors[side]:
                    with self._config.domealert_daemon.connect() as domealert:
                        def at_requested_limit(s):
                            status = self._shutter_a if side == 'a' else self._shutter_b
                            belt_tensioned = domealert.last_measurement()[self._config.domealert_belt_sensors[side]]
                            return status == DomeShutterStatus.Open or not belt_tensioned or 0 < steps <= s

                        success = success and self.__move_shutter(side, at_requested_limit, step_delay, timeout,
                                                                  not slow_open)
                        belt_tensioned = domealert.last_measurement()[self._config.domealert_belt_sensors[side]]
                        if not belt_tensioned:
                            log.error(self._config.log_name, f'{self._config.side_labels[side]} belt is slack!')
                            success = False
                else:
                    def at_requested_limit(s):
                        status = self._shutter_a if side == 'a' else self._shutter_b
                        return status == DomeShutterStatus.Open or 0 < steps <= s

                    success = success and self.__move_shutter(side, at_requested_limit, step_delay, timeout,
                                                              not slow_open)
            # pylint: enable=cell-var-from-loop

            if not success:
                log.error(self._config.log_name, 'Failed to open dome')
                return CommandStatus.Failed

            log.info(self._config.log_name, 'Open complete')
            return CommandStatus.Succeeded

    @Pyro4.expose
    def close_shutters(self, sides, steps=0):
        """
        Close one or both dome shutters, optionally by a limited number of steps
        :param sides: string containing 'a' and/or 'b' defining the sides and order
        :param steps: Number of steps to move, or full close if 0
        :return: CommandStatus indicating success or error code
        """
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if self._engineering_mode:
            return CommandStatus.EngineeringModeActive

        if self._heartbeat_status == DomeHeartbeatStatus.TrippedClosing:
            return CommandStatus.HeartbeatCloseInProgress

        if self._heartbeat_status == DomeHeartbeatStatus.TrippedIdle:
            return CommandStatus.HeartbeatTimedOut

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            sides = sides.upper()
            if 'A' in sides and 'B' in sides:
                log.info(self._config.log_name, 'Closing both shutters')
            else:
                log.info(self._config.log_name, f'Closing {self._config.side_labels[sides.lower()]} shutter')

            success = True

            # If moving a fixed number of steps then we must wait for the shutters
            # to stop moving between each step command to ensure the step size is constant
            step_delay = self._config.step_command_delay_seconds if steps > 0 \
                else self._config.command_delay_seconds

            # If moving a fixed number of steps then the timeout is implicit
            # (step_command_delay_seconds * steps)
            timeout = 0 if steps > 0 else self._config.shutter_timeout_seconds

            # pylint: disable=cell-var-from-loop
            for side in sides:
                def at_requested_limit(s):
                    status = self._shutter_a if side == 'A' else self._shutter_b
                    return status == DomeShutterStatus.Closed or 0 < steps <= s

                # Already closed?
                if at_requested_limit(0):
                    continue

                success = success and self.__move_shutter(side, at_requested_limit, step_delay, timeout)
            # pylint: enable=cell-var-from-loop

            if not success:
                log.error(self._config.log_name, 'Failed to close dome')
                return CommandStatus.Failed

            log.info(self._config.log_name, 'Close complete')
            return CommandStatus.Succeeded

    @Pyro4.expose
    def stop(self):
        """Stops any active shutter movement"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if self._heartbeat_status == DomeHeartbeatStatus.TrippedClosing:
            return CommandStatus.HeartbeatCloseInProgress

        log.warning(self._config.log_name, 'Received stop command')

        # The stop command overrides all other commands
        self._force_stopped = True
        with self._command_lock:
            self._force_stopped = False

        return CommandStatus.Succeeded

    @Pyro4.expose
    def set_engineering_mode(self, enabled):
        """Enable engineering mode (all movement commands disabled)"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            if self._heartbeat_status == DomeHeartbeatStatus.TrippedClosing:
                return CommandStatus.HeartbeatCloseInProgress

            if self._heartbeat_status == DomeHeartbeatStatus.Active:
                return CommandStatus.EngineeringModeRequiresHeartbeatDisabled

            self._engineering_mode = enabled
            return CommandStatus.Succeeded

    @Pyro4.expose
    def set_heartbeat_timer(self, timeout):
        """Enable or disable the auto-close countdown"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if self._engineering_mode:
            return CommandStatus.EngineeringModeActive

        if self._heartbeat_status == DomeHeartbeatStatus.Unavailable:
            return CommandStatus.HeartbeatUnavailable

        if self._heartbeat_status == DomeHeartbeatStatus.TrippedClosing:
            return CommandStatus.HeartbeatCloseInProgress

        if timeout != 0 and self._heartbeat_status == DomeHeartbeatStatus.TrippedIdle:
            return CommandStatus.HeartbeatTimedOut

        if timeout < 0 or timeout >= 120:
            return CommandStatus.HeartbeatInvalidTimeout

        # Heartbeat monitor represents time using half-second ticks
        length = self._heartbeat_port.write(bytes([(2 * timeout)]))
        return CommandStatus.Succeeded if length == 1 else CommandStatus.Failed

    @Pyro4.expose
    def set_heartbeat_siren(self, enabled):
        """Enable or disable the siren before normal open/close
           (siren is always enabled for emergency close)
        """
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if self._engineering_mode:
            return CommandStatus.EngineeringModeActive

        self._heartbeat_siren_enabled = enabled
        return CommandStatus.Succeeded

    @Pyro4.expose
    def status(self):
        """Query the latest status."""
        with self._status_lock:
            date = self._status_time.strftime('%Y-%m-%dT%H:%M:%SZ')
            heartbeat_date = self._heartbeat_date.strftime('%Y-%m-%dT%H:%M:%SZ')
            closed = self._shutter_a == DomeShutterStatus.Closed and \
                self._shutter_b == DomeShutterStatus.Closed

            status = {
                'date': date,
                'shutter_a': self._shutter_a,
                'shutter_b': self._shutter_b,
                'shutter_a_label': DomeShutterStatus.label(self._shutter_a),
                'shutter_b_label': DomeShutterStatus.label(self._shutter_b),
                'closed': closed,
                'engineering_mode': self._engineering_mode,
                'heartbeat_date': heartbeat_date,
                'heartbeat_status': self._heartbeat_status,
                'heartbeat_status_label': DomeHeartbeatStatus.label(self._heartbeat_status),
                'heartbeat_remaining': self._heartbeat_time_remaining,
                'heartbeat_siren': self._heartbeat_siren_enabled
            }

            if self._config.domealert_daemon:
                with self._config.domealert_daemon.connect() as domealert:
                    domealert_status = domealert.last_measurement()
                    for side, sensor in self._config.domealert_belt_sensors.items():
                        if sensor:
                            status[f'belt_{side}_tensioned'] = domealert_status[sensor]

            return status


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Dome daemon')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    c = Config(args.config)
    c.daemon.launch(DomeDaemon(c))
